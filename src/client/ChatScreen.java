package client; /** * This program is a rudimentary demonstration of Swing GUI programming. * Note, the default layout manager for JFrames is the border layout. This * enables us to position containers using the coordinates South and Center. * * Usage: *	java ChatScreen * * When the user enters text in the textfield, it is displayed backwards  * in the display area. * * * Homework6 - Augustine Valdez and Braxden Hanzelka * 12/01/2020 Networks */import java.awt.*;import java.awt.event.*;import java.io.*;import java.net.Socket;import java.net.UnknownHostException;import javax.swing.*;import javax.swing.border.*;public class ChatScreen extends JFrame implements ActionListener, KeyListener {	private JButton sendButton;	private JButton exitButton;	private JTextField sendText;	private JTextArea displayArea;	private OutputStream toServer;	public ChatScreen(OutputStream toServer) {		/**		 * a panel used for placing components		 */		this.toServer = toServer;		JPanel p = new JPanel();		p.setBackground(Color.magenta);		Border etched = BorderFactory.createEtchedBorder();		Border titled = BorderFactory.createTitledBorder(etched, "Enter Message Here ...");		p.setBorder(titled);		/**		 * set up all the components		 */		sendText = new JTextField(45);		sendButton = new JButton("Send");		exitButton = new JButton("Exit");		/**		 * register the listeners for the different button clicks		 */        sendText.addKeyListener(this);		sendButton.addActionListener(this);		exitButton.addActionListener(this);		sendButton.setBackground(Color.CYAN);		exitButton.setBackground(Color.CYAN);		/**		 * add the components to the panel		 */		p.add(sendText);		p.add(sendButton);		p.add(exitButton);		/**		 * add the panel to the "south" end of the container		 */		getContentPane().add(p,"South");		/**		 * add the text area for displaying output. Associate		 * a scrollbar with this text area. Note we add the scrollpane		 * to the container, not the text area		 */		displayArea = new JTextArea(15,40);		displayArea.setEditable(false);		displayArea.setFont(new Font("Times New Roman", Font.BOLD, 20));		displayArea.setBackground(Color.BLACK);		displayArea.setForeground(Color.cyan);		JScrollPane scrollPane = new JScrollPane(displayArea);		getContentPane().add(scrollPane,"Center");		/**		 * set the title and size of the frame		 */		setTitle("AUGUSTINES & BRAXDENS CHATROOM");		pack(); 		setVisible(true);		sendText.requestFocus();		/** anonymous inner class to handle window closing events */		addWindowListener(new WindowAdapter() {			public void windowClosing(WindowEvent evt) {				System.exit(0);			}		} );	}		/**		 * Displays a message		 */		public void displayMessage(String message) {			displayArea.append(message + "\n");		}                /**         * This gets the text the user entered and outputs it         * in the display area.         */        public void displayText() throws IOException {            String message = sendText.getText().trim();			// take message and package it and sent to the server			toServer.write(("MSG " +message +"\r\n").getBytes());            toServer.flush();            sendText.setText("");            sendText.requestFocus();		}	/**	 * This method responds to action events .... i.e. button clicks         * and fulfills the contract of the ActionListener interface.	 */	public void actionPerformed(ActionEvent evt) {		Object source = evt.getSource();		if (source == sendButton) {			try {				displayText();			} catch (IOException e) {				e.printStackTrace();			}		}		else if (source == exitButton) {			try {				// sending broadcast message to server that a user left.				toServer.write(("EXIT\r\n").getBytes());                toServer.flush();				System.exit(0);			} catch (IOException e) {				e.printStackTrace();			}		}	}                /**         * These methods responds to keystroke events and fulfills         * the contract of the KeyListener interface.         */                /**         * This is invoked when the user presses         * the ENTER key.         */        public void keyPressed(KeyEvent e) {             if (e.getKeyCode() == KeyEvent.VK_ENTER) {				try {					displayText();				} catch (IOException ioException) {					ioException.printStackTrace();				}			}        }                /** Not implemented */        public void keyReleased(KeyEvent e) { }                 /** Not implemented */        public void keyTyped(KeyEvent e) {  }        	public static void main(String[] args) throws IOException {		OutputStream toServer;		BufferedReader fromServer;		String status;		try {			Socket socket = new Socket(args[0], 63546);			toServer = socket.getOutputStream();			// pass instance data to constructor of chatscreen			fromServer = new BufferedReader(new InputStreamReader(socket.getInputStream()));			// write to the socket not display message			toServer.write(("LOGIN "+args[1]+"\r\n").getBytes());            toServer.flush();			status = fromServer.readLine();			status = status.substring(status.indexOf(" ") + 1);			if(status.equals("1")){				ChatScreen win = new ChatScreen(toServer);				Thread ReaderThread = new Thread(new ReaderThread(fromServer, win));				ReaderThread.start();			}			else {				System.exit(0);			}		}		catch (UnknownHostException uhe) { System.out.println(uhe); }		catch (IOException ioe) { System.out.println(ioe); }	}}